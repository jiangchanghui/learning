def loadGroovyConfig() {
    def configFile = file('config.groovy')
    new ConfigSlurper(profile).parse(configFile.toURL()).toProperties()
}

def defaultProperty(propertyName, defaultValue) {
    return hasProperty(propertyName) ? project[propertyName] : defaultValue
}

profile = defaultProperty('profile', 'development')
groovyConfig = loadGroovyConfig()

allprojects {
    apply plugin: 'maven'
    group = 'elf'
    version = '1.0.0-SNAPSHOT'
}





subprojects {
    apply plugin: 'java'
    sourceCompatibility = 1.6
    targetCompatibility = 1.6
    sourceSets {
        main {
            resources {
                srcDirs 'src/main/java', 'src/main/resources'
            }
        }
        test {
            resources {
                srcDirs 'src/test/java', 'src/test/resources'
            }
        }
    }
    repositories {
        mavenLocal()

        // maven { url "http://nexus.dev.chinaamc/content/groups/public" }
    }

    processTestResources {
        filter org.apache.tools.ant.filters.ReplaceTokens, tokens: groovyConfig
    }

    dependencies {
        testCompile group: 'elf', name: 'elf.test.dbunit', version: '1.0.0'
    }
    test {
        // enable TestNG support (default is JUnit)
        //useTestNG()

        // set a system property for the test JVM(s)
        //systemProperty 'some.prop', 'value'

        // explicitly include or exclude tests
        //include 'org/foo/**'
        //exclude 'org/boo/**'

        // show standard out and standard error of the test JVM(s) on the console
        testLogging.showStandardStreams = true

        // set heap size for the test JVM(s)
        minHeapSize = "128m"
        maxHeapSize = "512m"

        // set JVM arguments for the test JVM(s)
        jvmArgs '-XX:MaxPermSize=256m'

        // listen to events in the test execution lifecycle
        beforeTest { descriptor ->
            logger.lifecycle("Running test: " + descriptor)
        }

        // listen to standard out and standard error of the test JVM(s)
        //onOutput { descriptor, event ->
        //   logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
        //}

        // ignoreFailures = true
    }

}
